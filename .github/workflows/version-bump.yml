name: Version Bump and Release

on:
  workflow_dispatch:
    inputs:
      version-type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      custom-version:
        description: 'Custom version (overrides version-type if provided)'
        required: false
        type: string

env:
  CARGO_TERM_COLOR: always

jobs:
  version-bump:
    name: Bump Version and Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-edit
      run: cargo install cargo-edit

    - name: Get current version
      id: current-version
      run: |
        CURRENT_VERSION=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].version')
        echo "current=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "Current version: $CURRENT_VERSION"

    - name: Calculate new version
      id: new-version
      run: |
        if [ -n "${{ github.event.inputs.custom-version }}" ]; then
          NEW_VERSION="${{ github.event.inputs.custom-version }}"
          echo "Using custom version: $NEW_VERSION"
        else
          # Use semantic versioning to bump
          CURRENT="${{ steps.current-version.outputs.current }}"
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          
          case "${{ github.event.inputs.version-type }}" in
            "major")
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            "minor")
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            "patch")
              PATCH=$((PATCH + 1))
              ;;
          esac
          
          NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          echo "Bumping ${{ github.event.inputs.version-type }} version: $CURRENT -> $NEW_VERSION"
        fi
        
        echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

    - name: Update Cargo.toml version
      run: |
        cargo set-version ${{ steps.new-version.outputs.version }}
        
        # Verify the change
        NEW_VERSION_CHECK=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].version')
        echo "Version updated to: $NEW_VERSION_CHECK"

    - name: Update Cargo.lock
      run: |
        cargo check
        git add Cargo.lock

    - name: Create commit and tag
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Commit version changes
        git add Cargo.toml Cargo.lock
        git commit -m "chore: bump version to v${{ steps.new-version.outputs.version }}"
        
        # Create annotated tag
        git tag -a "v${{ steps.new-version.outputs.version }}" -m "Release v${{ steps.new-version.outputs.version }}"

    - name: Push changes and tag
      run: |
        git push origin main
        git push origin "v${{ steps.new-version.outputs.version }}"

    - name: Generate release notes
      id: release-notes
      run: |
        # Get commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        
        if [ -n "$LAST_TAG" ]; then
          echo "Generating changelog since $LAST_TAG"
          COMMITS=$(git log --pretty=format:"- %s (%h)" "$LAST_TAG"..HEAD)
        else
          echo "No previous tag found, generating changelog from all commits"
          COMMITS=$(git log --pretty=format:"- %s (%h)" --max-count=20)
        fi
        
        # Create release notes
        cat > release-notes.md << EOF
        ## What's Changed
        
        $COMMITS
        
        **Full Changelog**: https://github.com/${{ github.repository }}/compare/$LAST_TAG...v${{ steps.new-version.outputs.version }}
        
        ## Downloads
        
        Binary downloads and container images will be available shortly via automated builds.
        EOF
        
        echo "Release notes generated"

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.new-version.outputs.version }}
        name: NAT-PMP Server v${{ steps.new-version.outputs.version }}
        body_path: release-notes.md
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Summary
      run: |
        echo "## 🎉 Version Bump Successful!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Old Version**: ${{ steps.current-version.outputs.current }}" >> $GITHUB_STEP_SUMMARY
        echo "**New Version**: ${{ steps.new-version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "**Bump Type**: ${{ github.event.inputs.version-type }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "1. 🏗️ Binary builds will start automatically" >> $GITHUB_STEP_SUMMARY
        echo "2. 🐳 Container images will be built for multiple architectures" >> $GITHUB_STEP_SUMMARY
        echo "3. 📦 Release assets will be attached when builds complete" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Release URL**: https://github.com/${{ github.repository }}/releases/tag/v${{ steps.new-version.outputs.version }}" >> $GITHUB_STEP_SUMMARY