name: Docker

on:
  # Allow being called from other workflows (like release)
  workflow_call:
    inputs:
      ref:
        description: 'Git ref to build (branch, tag, or commit SHA)'
        required: false
        type: string

  # Manual trigger from Actions tab
  workflow_dispatch:
    inputs:
      ref:
        description: 'Git ref to build (branch, tag, or commit SHA).'
        required: false
        type: string

  # Trigger via PR comment: /build-docker (admin/write access only)
  issue_comment:
    types: [created]

jobs:
  # Check if comment trigger is valid
  check-trigger:
    name: Check Trigger
    if: github.event_name == 'issue_comment'
    runs-on: ubuntu-latest
    outputs:
      triggered: ${{ steps.check.outputs.triggered || 'false' }}
      pr_ref: ${{ steps.pr.outputs.ref || '' }}
      pr_sha: ${{ steps.pr.outputs.sha || '' }}
    permissions:
      pull-requests: read
      issues: write

    steps:
    - name: Set defaults
      id: defaults
      run: |
        echo "triggered=false" >> $GITHUB_OUTPUT

    - name: Check comment and permissions
      id: check
      if: github.event_name == 'issue_comment'
      uses: actions/github-script@v8
      with:
        script: |
          // Only trigger on /build-docker comment
          if (context.payload.comment.body.trim() !== '/build-docker') {
            console.log('Not a /build-docker comment');
            core.setOutput('triggered', 'false');
            return;
          }

          // Check if this is on a PR
          if (!context.payload.issue.pull_request) {
            console.log('Not a pull request');
            core.setOutput('triggered', 'false');
            return;
          }

          // Check if commenter has write access
          const { data: permission } = await github.rest.repos.getCollaboratorPermissionLevel({
            owner: context.repo.owner,
            repo: context.repo.repo,
            username: context.payload.comment.user.login
          });

          console.log(`User ${context.payload.comment.user.login} has permission: ${permission.permission}`);

          if (permission.permission !== 'write' && permission.permission !== 'admin') {
            console.log('User does not have write/admin access');
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: '❌ You need write access to trigger Docker builds.'
            });
            core.setOutput('triggered', 'false');
            return;
          }

          console.log('All checks passed, triggering build');
          core.setOutput('triggered', 'true');

    - name: Get PR details
      id: pr
      if: github.event_name == 'issue_comment' && steps.check.outputs.triggered == 'true'
      uses: actions/github-script@v8
      with:
        script: |
          const pr = await github.rest.pulls.get({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number
          });
          core.setOutput('ref', pr.data.head.ref);
          core.setOutput('sha', pr.data.head.sha);

    - name: React to comment
      if: github.event_name == 'issue_comment' && steps.check.outputs.triggered == 'true'
      uses: actions/github-script@v8
      with:
        script: |
          github.rest.reactions.createForIssueComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            comment_id: context.payload.comment.id,
            content: 'rocket'
          });

  docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    if: |
      always() && (
        github.event_name == 'workflow_dispatch' ||
        github.event_name == 'workflow_call' ||
        (github.event_name == 'issue_comment' && needs.check-trigger.outputs.triggered == 'true')
      )
    needs: [check-trigger]
    permissions:
      contents: read
      packages: write
      pull-requests: write

    steps:
    - name: Determine ref to checkout
      id: ref
      run: |
        if [ "${{ github.event_name }}" = "issue_comment" ]; then
          echo "ref=${{ needs.check-trigger.outputs.pr_ref }}" >> $GITHUB_OUTPUT
          echo "sha=${{ needs.check-trigger.outputs.pr_sha }}" >> $GITHUB_OUTPUT
        elif [ -n "${{ inputs.ref }}" ]; then
          echo "ref=${{ inputs.ref }}" >> $GITHUB_OUTPUT
        else
          echo "ref=${{ github.ref }}" >> $GITHUB_OUTPUT
        fi

    - name: Checkout repository
      uses: actions/checkout@v5
      with:
        ref: ${{ steps.ref.outputs.ref }}

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata (for releases with semver tags)
      if: inputs.ref && startsWith(inputs.ref, 'v')
      id: meta-release
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=semver,pattern={{version}},value=${{ inputs.ref }}
          type=semver,pattern={{major}}.{{minor}},value=${{ inputs.ref }}
          type=semver,pattern={{major}},value=${{ inputs.ref }}
          type=raw,value=latest

    - name: Extract metadata (for CI builds)
      if: ${{ !inputs.ref || !startsWith(inputs.ref, 'v') }}
      id: meta-ci
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-

    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64
        push: true
        pull: true
        tags: ${{ (inputs.ref && startsWith(inputs.ref, 'v')) && steps.meta-release.outputs.tags || steps.meta-ci.outputs.tags }}
        labels: ${{ (inputs.ref && startsWith(inputs.ref, 'v')) && steps.meta-release.outputs.labels || steps.meta-ci.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build summary
      run: |
        echo "## 🐳 Docker Images Pushed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Ref**: ${{ steps.ref.outputs.ref }}" >> $GITHUB_STEP_SUMMARY
        echo "**Platforms**: linux/amd64" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📦 Published Tags" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        if [ -n "${{ inputs.ref }}" ] && [[ "${{ inputs.ref }}" == v* ]]; then
          echo "${{ steps.meta-release.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
        else
          echo "${{ steps.meta-ci.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
        fi
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

    - name: Comment on PR with result
      if: github.event_name == 'issue_comment'
      uses: actions/github-script@v8
      with:
        script: |
          const tags = `${{ steps.meta-ci.outputs.tags }}`.split('\n').filter(t => t).join('\n- ');
          github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: `✅ Docker images built and pushed!\n\n**Tags:**\n- ${tags}\n\n**Platforms:** linux/amd64`
          });
