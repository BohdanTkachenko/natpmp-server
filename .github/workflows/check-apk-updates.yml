name: Check APK Package Updates

on:
  schedule:
    # Check for APK updates weekly on Wednesdays at 4:00 AM UTC
    - cron: '0 4 * * 3'
  workflow_dispatch:  # Allow manual trigger

jobs:
  check-apk-updates:
    name: Check APK Package Updates
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v5

    - name: Check for APK package updates
      id: check-updates
      run: |
        # Extract versions from Dockerfile
        RUST_VERSION=$(grep "ARG RUST_VERSION=" Dockerfile | head -1 | sed 's/ARG RUST_VERSION=//')
        ALPINE_VERSION=$(grep "ARG ALPINE_VERSION=" Dockerfile | head -1 | sed 's/ARG ALPINE_VERSION=//')
        echo "Detected Rust version: $RUST_VERSION"
        echo "Detected Alpine version: $ALPINE_VERSION"
        
        echo "Checking for APK package updates in Alpine $ALPINE_VERSION..."
        
        # Extract current versions from Dockerfile
        CURRENT_MUSL=$(grep "musl-dev=" Dockerfile | sed 's/.*musl-dev=\([^ ]*\).*/\1/')
        CURRENT_LIBNATPMP=$(grep "libnatpmp=" Dockerfile | sed 's/.*libnatpmp=\([^ ]*\).*/\1/' | head -1)
        CURRENT_CA_CERTS=$(grep "ca-certificates=" Dockerfile | sed 's/.*ca-certificates=\([^ ]*\).*/\1/')
        
        echo "Current versions:"
        echo "  musl-dev: $CURRENT_MUSL"
        echo "  libnatpmp: $CURRENT_LIBNATPMP"  
        echo "  ca-certificates: $CURRENT_CA_CERTS"
        
        # Check latest versions in current Alpine version
        echo "Checking latest versions in Alpine $ALPINE_VERSION..."
        
        # Use a simpler approach with better parsing
        docker run --rm alpine:$ALPINE_VERSION sh -c '
          apk update >/dev/null 2>&1
          echo "LATEST_MUSL=$(apk list musl-dev 2>/dev/null | head -1 | cut -d" " -f1 | sed "s/musl-dev-//")"
          echo "LATEST_LIBNATPMP=$(apk list libnatpmp 2>/dev/null | head -1 | cut -d" " -f1 | sed "s/libnatpmp-//")"
          echo "LATEST_CA_CERTS=$(apk list ca-certificates 2>/dev/null | head -1 | cut -d" " -f1 | sed "s/ca-certificates-//")"
        ' > latest_versions.env
        
        source latest_versions.env
        
        echo "Latest versions:"
        echo "  musl-dev: $LATEST_MUSL"
        echo "  libnatpmp: $LATEST_LIBNATPMP"
        echo "  ca-certificates: $LATEST_CA_CERTS"
        
        # Check for updates and prepare individual package data
        UPDATES_AVAILABLE=false
        
        # Check musl-dev
        if [ "$CURRENT_MUSL" != "$LATEST_MUSL" ] && [ -n "$LATEST_MUSL" ]; then
          echo "musl-dev update available: $CURRENT_MUSL ‚Üí $LATEST_MUSL"
          echo "MUSL_UPDATE_AVAILABLE=true" >> $GITHUB_ENV
          UPDATES_AVAILABLE=true
        else
          echo "MUSL_UPDATE_AVAILABLE=false" >> $GITHUB_ENV
        fi
        
        # Check libnatpmp
        if [ "$CURRENT_LIBNATPMP" != "$LATEST_LIBNATPMP" ] && [ -n "$LATEST_LIBNATPMP" ]; then
          echo "libnatpmp update available: $CURRENT_LIBNATPMP ‚Üí $LATEST_LIBNATPMP"  
          echo "LIBNATPMP_UPDATE_AVAILABLE=true" >> $GITHUB_ENV
          UPDATES_AVAILABLE=true
        else
          echo "LIBNATPMP_UPDATE_AVAILABLE=false" >> $GITHUB_ENV
        fi
        
        # Check ca-certificates
        if [ "$CURRENT_CA_CERTS" != "$LATEST_CA_CERTS" ] && [ -n "$LATEST_CA_CERTS" ]; then
          echo "ca-certificates update available: $CURRENT_CA_CERTS ‚Üí $LATEST_CA_CERTS"
          echo "CA_CERTS_UPDATE_AVAILABLE=true" >> $GITHUB_ENV
          UPDATES_AVAILABLE=true
        else
          echo "CA_CERTS_UPDATE_AVAILABLE=false" >> $GITHUB_ENV
        fi
        
        echo "UPDATES_AVAILABLE=$UPDATES_AVAILABLE" >> $GITHUB_ENV
        
        # Save versions for issue creation
        echo "RUST_VERSION=$RUST_VERSION" >> $GITHUB_ENV
        echo "CURRENT_MUSL=$CURRENT_MUSL" >> $GITHUB_ENV
        echo "CURRENT_LIBNATPMP=$CURRENT_LIBNATPMP" >> $GITHUB_ENV
        echo "CURRENT_CA_CERTS=$CURRENT_CA_CERTS" >> $GITHUB_ENV
        echo "ALPINE_VERSION=$ALPINE_VERSION" >> $GITHUB_ENV
        echo "LATEST_MUSL=$LATEST_MUSL" >> $GITHUB_ENV
        echo "LATEST_LIBNATPMP=$LATEST_LIBNATPMP" >> $GITHUB_ENV
        echo "LATEST_CA_CERTS=$LATEST_CA_CERTS" >> $GITHUB_ENV

    - name: Handle musl-dev package update
      uses: actions/github-script@v7
      with:
        script: |
          const packageName = 'musl-dev';
          const updateAvailable = process.env.MUSL_UPDATE_AVAILABLE === 'true';
          const current = process.env.CURRENT_MUSL;
          const latest = process.env.LATEST_MUSL;
          
          // Check for existing issue
          const { data: issues } = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: `apk-update-${packageName}`,
            state: 'open'
          });
          
          if (updateAvailable) {
            const issueTitle = 'üì¶ Update ' + packageName + ' package: ' + current + ' ‚Üí ' + latest;
            const issueBody = '# üì¶ ' + packageName + ' Package Update Available\n\n' +
              '**Current version:** `' + current + '`\n' +
              '**Latest version:** `' + latest + '`\n' +
              '**Alpine version:** `' + process.env.ALPINE_VERSION + '`\n\n' +
              '## üõ†Ô∏è How to Update\n\n' +
              'Update the pinned version in `Dockerfile`:\n\n' +
              '```dockerfile\n' +
              '# Build stage\n' +
              'RUN apk add --no-cache \\\\\n' +
              '    musl-dev=' + latest + ' \\\\\n' +
              '    libnatpmp-dev=' + process.env.CURRENT_LIBNATPMP + '\n' +
              '```\n\n' +
              '## üîç What to Check\n\n' +
              '- [ ] Test that the container builds successfully\n' +
              '- [ ] Verify the NAT-PMP server still works correctly\n' +
              '- [ ] Check for any breaking changes in the update\n\n' +
              '---\n\n' +
              'This issue was automatically created by the APK update checker workflow.\n' +
              'Package type: **Build dependency**';
            
            if (issues.length === 0) {
              // Create new issue
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: issueTitle,
                body: issueBody,
                labels: [`apk-update-${packageName}`, 'dependencies', 'build-dependency']
              });
              console.log(`Created new issue for ${packageName}`);
            } else {
              // Update existing issue
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issues[0].number,
                body: '## Updated Check - ' + new Date().toISOString() + '\\n\\n' + packageName + ' still needs update: `' + current + '` ‚Üí `' + latest + '`'
              });
              console.log(`Updated existing issue for ${packageName}`);
            }
          } else {
            // Close existing issues if package is up to date
            for (const issue of issues) {
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                state: 'closed'
              });
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: '‚úÖ ' + packageName + ' is now up to date (' + current + '). Closing this issue.'
              });
              console.log(`Closed issue for ${packageName} - package is up to date`);
            }
          }

    - name: Handle libnatpmp package update  
      uses: actions/github-script@v7
      with:
        script: |
          const packageName = 'libnatpmp';
          const updateAvailable = process.env.LIBNATPMP_UPDATE_AVAILABLE === 'true';
          const current = process.env.CURRENT_LIBNATPMP;
          const latest = process.env.LATEST_LIBNATPMP;
          
          // Check for existing issue
          const { data: issues } = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: `apk-update-${packageName}`,
            state: 'open'
          });
          
          if (updateAvailable) {
            const issueTitle = 'üì¶ Update ' + packageName + ' package: ' + current + ' ‚Üí ' + latest;
            const issueBody = '# üì¶ ' + packageName + ' Package Update Available\n\n' +
              '**Current version:** `' + current + '`\n' +
              '**Latest version:** `' + latest + '`\n' +
              '**Alpine version:** `' + process.env.ALPINE_VERSION + '`\n\n' +
              '## üõ†Ô∏è How to Update\n\n' +
              'Update the pinned versions in `Dockerfile`:\n\n' +
              '```dockerfile\n' +
              '# Build stage\n' +
              'RUN apk add --no-cache \\\\\n' +
              '    musl-dev=' + process.env.CURRENT_MUSL + ' \\\\\n' +
              '    libnatpmp-dev=' + latest + '\n\n' +
              '# Runtime stage\n' +
              'RUN apk add --no-cache \\\\\n' +
              '    libnatpmp=' + latest + ' \\\\\n' +
              '    ca-certificates=' + process.env.CURRENT_CA_CERTS + '\n' +
              '```\n\n' +
              '## üîç What to Check\n\n' +
              '- [ ] Test that the container builds successfully\n' +
              '- [ ] Verify the NAT-PMP server still works correctly\n' +
              '- [ ] Check for any breaking changes in the update\n\n' +
              '---\n\n' +
              'This issue was automatically created by the APK update checker workflow.\n' +
              'Package type: **Runtime dependency**';
            
            if (issues.length === 0) {
              // Create new issue
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: issueTitle,
                body: issueBody,
                labels: [`apk-update-${packageName}`, 'dependencies', 'runtime-dependency']
              });
              console.log(`Created new issue for ${packageName}`);
            } else {
              // Update existing issue
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issues[0].number,
                body: '## Updated Check - ' + new Date().toISOString() + '\\n\\n' + packageName + ' still needs update: `' + current + '` ‚Üí `' + latest + '`'
              });
              console.log(`Updated existing issue for ${packageName}`);
            }
          } else {
            // Close existing issues if package is up to date
            for (const issue of issues) {
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                state: 'closed'
              });
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: '‚úÖ ' + packageName + ' is now up to date (' + current + '). Closing this issue.'
              });
              console.log(`Closed issue for ${packageName} - package is up to date`);
            }
          }

    - name: Handle ca-certificates package update
      uses: actions/github-script@v7
      with:
        script: |
          const packageName = 'ca-certificates';
          const updateAvailable = process.env.CA_CERTS_UPDATE_AVAILABLE === 'true';
          const current = process.env.CURRENT_CA_CERTS;
          const latest = process.env.LATEST_CA_CERTS;
          
          // Check for existing issue
          const { data: issues } = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: `apk-update-${packageName}`,
            state: 'open'
          });
          
          if (updateAvailable) {
            const issueTitle = 'üì¶ Update ' + packageName + ' package: ' + current + ' ‚Üí ' + latest;
            const issueBody = '# üì¶ ' + packageName + ' Package Update Available\n\n' +
              '**Current version:** `' + current + '`\n' +
              '**Latest version:** `' + latest + '`\n' +
              '**Alpine version:** `' + process.env.ALPINE_VERSION + '`\n\n' +
              '## üõ†Ô∏è How to Update\n\n' +
              'Update the pinned version in `Dockerfile`:\n\n' +
              '```dockerfile\n' +
              '# Runtime stage\n' +
              'RUN apk add --no-cache \\\\\n' +
              '    libnatpmp=' + process.env.CURRENT_LIBNATPMP + ' \\\\\n' +
              '    ca-certificates=' + latest + '\n' +
              '```\n\n' +
              '## üîç What to Check\n\n' +
              '- [ ] Test that the container builds successfully\n' +
              '- [ ] Verify the NAT-PMP server still works correctly\n' +
              '- [ ] Check for any breaking changes in the update\n\n' +
              '---\n\n' +
              'This issue was automatically created by the APK update checker workflow.\n' +
              'Package type: **Runtime dependency**';
            
            if (issues.length === 0) {
              // Create new issue
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: issueTitle,
                body: issueBody,
                labels: [`apk-update-${packageName}`, 'dependencies', 'runtime-dependency']
              });
              console.log(`Created new issue for ${packageName}`);
            } else {
              // Update existing issue
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issues[0].number,
                body: '## Updated Check - ' + new Date().toISOString() + '\\n\\n' + packageName + ' still needs update: `' + current + '` ‚Üí `' + latest + '`'
              });
              console.log(`Updated existing issue for ${packageName}`);
            }
          } else {
            // Close existing issues if package is up to date
            for (const issue of issues) {
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                state: 'closed'
              });
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: '‚úÖ ' + packageName + ' is now up to date (' + current + '). Closing this issue.'
              });
              console.log(`Closed issue for ${packageName} - package is up to date`);
            }
          }

    - name: Generate summary
      if: always()
      run: |
        echo "## üì¶ APK Package Update Check" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "$UPDATES_AVAILABLE" = "true" ]; then
          echo "### ‚úÖ Updates Available" >> $GITHUB_STEP_SUMMARY
          echo "Individual issues have been created for packages that need updates:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "$MUSL_UPDATE_AVAILABLE" = "true" ]; then
            echo "- üì¶ **musl-dev**: $CURRENT_MUSL ‚Üí $LATEST_MUSL" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "$LIBNATPMP_UPDATE_AVAILABLE" = "true" ]; then
            echo "- üì¶ **libnatpmp**: $CURRENT_LIBNATPMP ‚Üí $LATEST_LIBNATPMP" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "$CA_CERTS_UPDATE_AVAILABLE" = "true" ]; then
            echo "- üì¶ **ca-certificates**: $CURRENT_CA_CERTS ‚Üí $LATEST_CA_CERTS" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üìù Check the repository issues for individual update instructions." >> $GITHUB_STEP_SUMMARY
        else
          echo "### ‚úÖ All Packages Up to Date" >> $GITHUB_STEP_SUMMARY
          echo "No APK package updates available in Alpine $ALPINE_VERSION." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Current versions:" >> $GITHUB_STEP_SUMMARY
          echo "- **musl-dev**: $CURRENT_MUSL" >> $GITHUB_STEP_SUMMARY
          echo "- **libnatpmp**: $CURRENT_LIBNATPMP" >> $GITHUB_STEP_SUMMARY
          echo "- **ca-certificates**: $CURRENT_CA_CERTS" >> $GITHUB_STEP_SUMMARY
        fi